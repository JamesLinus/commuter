#!/usr/bin/python

import sys
import argparse
import json
import itertools
import collections

# XXX Separate stacks and shared into a separate, lazily loaded
# database

def reformat_tests(testcases, add):
    """Convert testcases into format expected by viewer."""

    for testcase in mscan['testcases']:
        # Split name
        suite, name = testcase.pop('name').split('-', 1)
        calls, pathid, testno = name.rsplit('_', 2)
        testno = int(testno)
        testcase['calls'] = calls
        testcase['pathid'] = pathid
        testcase['testno'] = testno

        # Remove redundant fields
        for shared in testcase['shared']:
            if any(f in shared for f in ['stack', 'stack1', 'stack2']):
                for pc in ['pc', 'pc1', 'pc2']:
                    if pc in shared:
                        del shared[pc]
            del shared['rawaddr']

        # Add identifying fields
        testcase.update(add)

def dedup_stacks(testcases):
    stacks = {}
    rstacks = {}
    for testcase in testcases:
        for shared in testcase['shared']:
            # Deduplicate stacks
            for skey in ['stack', 'stack1', 'stack2']:
                if skey not in shared:
                    continue
                stack = shared[skey]
                rstackskey = tuple(stack)
                if rstackskey not in rstacks:
                    name = 's%d' % len(stacks)
                    stacks[name] = stack
                    rstacks[rstackskey] = name
                shared[skey] = rstacks[rstackskey]

        # # XXX Testing
        # testcase['nshared'] = len(testcase['shared'])
        # del testcase['shared']

    return stacks

def tablify(dicts, fields):
    data = []
    prev = []
    for d in dicts:
        # Convert to list
        dlst = []
        for f in fields:
            dlst.append(d.pop(f))

        # Delta compress against prev
        deltamask = 0
        delta = []
        for i in range(max(len(prev), len(dlst))):
            if i >= len(prev) or i >= len(dlst) or prev[i] != dlst[i]:
                deltamask |= 1 << i
                delta.append(dlst[i])
        if d:
            delta.append(d)
        data.append([deltamask] + delta)
        prev = dlst
    return {'!fields': fields, '!data': data}

parser = argparse.ArgumentParser()
parser.add_argument('mscan', type=file, help='mscan file')
parser.add_argument('runid', help='Run identifier')
args = parser.parse_args()

mscan = json.load(args.mscan)
reformat_tests(mscan['testcases'], {'runid': args.runid})
mscan['stacks'] = dedup_stacks(mscan['testcases'])
mscan['testcases'] = tablify(
    mscan['testcases'], ('runid', 'calls', 'pathid', 'testno', 'shared'))
json.dump(mscan, sys.stdout, separators=(',',':'))
#json.dump(mscan, sys.stdout, indent=2)
